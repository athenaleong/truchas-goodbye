[{"C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\index.js":"1","C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\App.jsx":"2","C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\components\\form\\form.jsx":"3","C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\components\\map\\map.jsx":"4","C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\components\\errorBoundary\\errorBoundary.jsx":"5","C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\components\\popUp\\popUp.jsx":"6","C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\components\\dropzone\\drop.jsx":"7"},{"size":621,"mtime":1607824218979,"results":"8","hashOfConfig":"9"},{"size":2620,"mtime":1607824475370,"results":"10","hashOfConfig":"9"},{"size":2928,"mtime":1607824218969,"results":"11","hashOfConfig":"9"},{"size":4362,"mtime":1607824218970,"results":"12","hashOfConfig":"9"},{"size":724,"mtime":1607824218969,"results":"13","hashOfConfig":"9"},{"size":777,"mtime":1607824218971,"results":"14","hashOfConfig":"9"},{"size":2164,"mtime":1607824218967,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1mpzutk",{"filePath":"20","messages":"21","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"19"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"19"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\index.js",["37"],"import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport './index.css';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Helmet>\r\n      <title>Tale of Truchas</title>\r\n    </Helmet>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n",["38","39"],"C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\App.jsx",["40","41","42","43","44"],"import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport MapSection from \"./components/map/map\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport PopUp from \"./components/popUp/popUp\";\r\nimport Form from \"./components/form/form\";\r\nimport ErrorBoundary from \"./components/errorBoundary/errorBoundary\";\r\nimport axios from \"axios\";\r\nimport qs from \"qs\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst location = {\r\n  lat: 36.04818,\r\n  lng: -105.81129,\r\n};\r\n\r\nfunction App() {\r\n  //Map\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [lat, setLat] = useState(null);\r\n  const [lng, setLng] = useState(null);\r\n\r\n  //Display Feature\r\n  const [feature, setFeature] = useState([]); //TODO: Expand to walks/path tracing\r\n  const [pointQuery, setPointQuery] = useState({});\r\n  const [geoJSON, setGeoJSON] = useState([]); //GEOJSONJson Display\r\n\r\n  const mapRef = useRef();\r\n\r\n  const [allUser, setAllUser] = useState([]); //TODO: move this to form.jsx. state hook wasn't working. not sure why\r\n\r\n  function onMapClick(obj) {\r\n    if (editMode) {\r\n      setModalShow(true);\r\n    }\r\n    setLat(obj.lat);\r\n    setLng(obj.lng);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let data = qs.stringify({\r\n      query: pointQuery,\r\n    });\r\n    let config = {\r\n      method: \"post\",\r\n      url: \"http://localhost:5555/getGeoJSON\", //TOEDIT\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n      data: data,\r\n    };\r\n\r\n    axios(config).then(function (response) {\r\n      let geoJSON = response.data;\r\n      setGeoJSON(geoJSON);\r\n      console.log(`data display: ${geoJSON}`);\r\n    });\r\n  }, [pointQuery, modalShow]);\r\n\r\n  useEffect(() => {\r\n    axios.get(\"http://localhost:5555/getUser\").then((res) => {\r\n      console.log(`res: ${JSON.stringify(res.data)}`);\r\n      setAllUser(res.data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button onClick={() => setEditMode(!editMode)}> Toggle Edit Mode </button>\r\n      <MapSection\r\n        location={location}\r\n        zoomLevel={16}\r\n        onClick={onMapClick}\r\n        mapRef={mapRef}\r\n        geoJSON={geoJSON}\r\n      />\r\n      <ErrorBoundary>\r\n        <PopUp\r\n          onHide={() => setModalShow(false)}\r\n          show={modalShow}\r\n          body={\r\n            <Form\r\n              lat={lat}\r\n              lng={lng}\r\n              setModalShow={setModalShow}\r\n              allUser={allUser}\r\n            ></Form>\r\n          }\r\n        >\r\n          {\" \"}\r\n        </PopUp>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\components\\form\\form.jsx",["45","46","47","48","49"],"import './form.css';\r\nimport React, {useEffect , useState} from 'react';\r\nimport { Controller, useForm, useFormContext } from \"react-hook-form\";\r\nimport Select from \"react-select\";\r\nimport ErrorBoundary from '../errorBoundary/errorBoundary'\r\nimport Dropzone from '../dropzone/drop'\r\nconst axios = require('axios');\r\nvar FormData = require('form-data');\r\n\r\n function Form(props) {\r\n    const {lat, lng, setModalShow, allUser} = props;\r\n\r\n    const {register, handleSubmit, control, setValue}  = useForm();\r\n\r\n    const onSubmit = async (data) => {\r\n\r\n        const images = data.images;\r\n        let imgId = [];\r\n        if (images.length != 0) {\r\n            let formData = new FormData();\r\n            images.forEach((img) => {\r\n                formData.append('img', img);\r\n            })\r\n\r\n\r\n            let config = {\r\n                method: 'post',\r\n                url: 'http://localhost:5555/uploadImage',\r\n                data : formData\r\n            }\r\n\r\n            // TODO: change for production\r\n            let res = await axios(config);\r\n            imgId = res.data.id;  \r\n        } \r\n\r\n        delete data['images'];\r\n        data = {...data, imgId: imgId, lat: lat, lng: lng, category:\"Point\"};\r\n\r\n        console.log(JSON.stringify(data));\r\n        \r\n        let res = await axios.post('http://localhost:5555/uploadPointer', data, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n\r\n        console.log(res.data);\r\n        setModalShow(false);\r\n    };\r\n    \r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"form\">\r\n            <input name=\"title\" ref={register({required: true, maxLength:10})} />\r\n            <textarea name=\"description\" ref={register({required: true, maxLength:30})} />\r\n            <div>\r\n                <input name=\"icon\" type=\"radio\" value=\"1\" ref={register({required: true, max:1})}/>\r\n                <input name=\"icon\" type=\"radio\" value=\"2\" ref={register({required: true, max:1})} />\r\n                <input name=\"icon\" type=\"radio\" value=\"3\" ref={register({required: true, max:1})} />\r\n                <input name=\"icon\" type=\"radio\" value=\"4\" ref={register({required: true, max:1})} />\r\n            </div>\r\n            <Controller\r\n                name=\"people\"\r\n                as={Select}\r\n                isMulti\r\n                options={[{value:'all', label:'all users'}, ...allUser]}\r\n                control={control}\r\n                rules={{required:true}}\r\n                defaultValue={null}\r\n            />\r\n\r\n            <Controller\r\n                name=\"images\"\r\n                control={control}\r\n                render={(onChange) =>\r\n                    <Dropzone onChange={onChange} register={register} setValue={setValue}></Dropzone>\r\n                }\r\n            \r\n            />\r\n\r\n            <input type=\"submit\" />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form\r\n\r\n","C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\components\\map\\map.jsx",["50"],"import GoogleMapReact from \"google-map-react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"./map.css\";\r\nimport useSupercluster from \"use-supercluster\";\r\n\r\nconst createMapOptions = function (map) {\r\n  return {\r\n    mapTypeId: map.MapTypeId.HYBRID,\r\n    styles: stylesArray,\r\n  };\r\n};\r\n// green : 5B8E7D\r\nconst Marker = ({ children }) => children;\r\n\r\nconst stylesArray = [\r\n  {\r\n    featureType: \"all\",\r\n    elementType: \"labels.text.stroke\",\r\n    stylers: [{ color: \"#5B8E7D\" }],\r\n  },\r\n  {\r\n    featureType: \"all\",\r\n    elementType: \"labels.text.fill\",\r\n    stylers: [{ color: \"#f5f1e6\" }],\r\n  },\r\n  {\r\n    featureType: \"water\",\r\n    elementType: \"geometry.fill\",\r\n    stylers: [{ color: \"#01295f\", weight: 8 }],\r\n  },\r\n  {\r\n    featureType: \"road.highway\",\r\n    elementType: \"geometry.fill\",\r\n    stylers: [{ color: \"#e9bc62\" }],\r\n  },\r\n  {\r\n    featureType: \"road.highway\",\r\n    elementType: \"labels.text.stroke\",\r\n    stylers: [{ color: \"#00000\" }],\r\n  },\r\n  {\r\n    featureType: \"road.local\",\r\n    elementType: \"geometry\",\r\n    stylers: [{ color: \"#f5f1e6\" }],\r\n  },\r\n];\r\n\r\nconst Map = ({ location, zoomLevel, onClick, mapRef, geoJSON }) => {\r\n  const [bounds, setBounds] = useState(null);\r\n  const [zoom, setZoom] = useState(zoomLevel);\r\n\r\n  console.log(`geoJSON: ${geoJSON.length}`);\r\n\r\n  const { clusters, supercluster } = useSupercluster({\r\n    points: geoJSON,\r\n    bounds: bounds,\r\n    zoom: zoom,\r\n    options: { radius: 75, maxZoom: 20 },\r\n  });\r\n\r\n  return (\r\n    <div className=\"map\">\r\n      <h2>Truchas Peaks</h2>\r\n      <div className=\"google-map\">\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: \"AIzaSyB3QgxQzYNKaDkSDBTEl3-wCYUFnQ9ilKs\" }}\r\n          defaultCenter={location}\r\n          defaultZoom={zoomLevel}\r\n          options={(map) => createMapOptions(map)}\r\n          onClick={onClick}\r\n          onChange={({ zoom, bounds }) => {\r\n            setZoom(zoom);\r\n            setBounds([\r\n              bounds.nw.lng,\r\n              bounds.se.lat,\r\n              bounds.se.lng,\r\n              bounds.nw.lat,\r\n            ]);\r\n          }}\r\n          yesIWantToUseGoogleMapApiInternals\r\n          onGoogleApiLoaded={({ map }) => {\r\n            mapRef.current = map;\r\n          }}\r\n        >\r\n          {/* Markers Here  */}\r\n          {clusters.map((cluster) => {\r\n            const [longitude, latitude] = cluster.geometry.coordinates;\r\n            const {\r\n              cluster: isCluster,\r\n              point_count: pointCount,\r\n            } = cluster.properties;\r\n\r\n            if (isCluster) {\r\n              return (\r\n                <Marker\r\n                  key={`cluster-${cluster.id}`}\r\n                  lat={latitude}\r\n                  lng={longitude}\r\n                >\r\n                  <div\r\n                    className=\"cluster-marker\"\r\n                    style={{\r\n                      width: `${10 + (pointCount / geoJSON.length) * 20}px`,\r\n                      height: `${10 + (pointCount / geoJSON.length) * 20}px`,\r\n                    }}\r\n                    onClick={() => {\r\n                      const expansionZoom = Math.min(\r\n                        supercluster.getClusterExpansionZoom(cluster.id),\r\n                        20\r\n                      );\r\n                      mapRef.current.setZoom(expansionZoom);\r\n                      mapRef.current.panTo({ lat: latitude, lng: longitude });\r\n                    }}\r\n                  >\r\n                    {pointCount}\r\n                  </div>\r\n                </Marker>\r\n              );\r\n            } else {\r\n              return (\r\n                <Marker\r\n                  key={`point-${cluster.properties.id}`}\r\n                  lat={latitude}\r\n                  lng={longitude}\r\n                >\r\n                  Hello\r\n                  {/* <button className=\"crime-marker\">\r\n                                <img src=\"/custody.svg\" alt=\"crime doesn't pay\" />\r\n                            </button> */}\r\n                </Marker>\r\n              );\r\n            }\r\n          })}\r\n        </GoogleMapReact>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// const styleDict = {\r\n//     apTypeId: maps.mapTypeId.SATELLITE,\r\n// }\r\n// options = {map => ({ mapTypeId: map.MapTypeId.SATELLITE, styles: [{\"featureType\": \"road.highway\", \"elementType\": \"geometry\", \"stylers\" : [{ \"color\" : \"#e9bc62\"}]}]})}\r\n\r\nexport default Map;\r\n","C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\components\\errorBoundary\\errorBoundary.jsx",[],"C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\components\\popUp\\popUp.jsx",["51"],"import React from 'react';\r\nimport './popUp.css';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nfunction PopUp(props) {\r\n    return(\r\n        <Modal {... props} animation={false}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Create new </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {props.body}\r\n            </Modal.Body>\r\n            {/* <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onHide}> Close </Button>\r\n                <Button variant=\"primary\" onClick={props.onHide}> Add New Marker </Button>\r\n            </Modal.Footer> */}\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default PopUp;","C:\\Users\\Chris\\Desktop\\truchas\\truchas-goodbye\\src\\components\\dropzone\\drop.jsx",["52","53","54","55","56","57","58"],"import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nimport \"./drop.css\";\r\n\r\nfunction Dropzone(props) {\r\n    const {onChange, register, setValue} = props\r\n    const [files, setFiles] = React.useState([]);\r\n    const [buffer, setBuffer] = React.useState([]);\r\n    const onDrop = React.useCallback(async function(acceptedFiles) {\r\n\r\n        acceptedFiles.forEach(async function(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                // const arrayBuffer = reader.result;\r\n                // const Uint8 = new Uint8Array(arrayBuffer)\r\n                // console.log(Uint8);\r\n                // buffer.push(Uint8); //not sure why setBuffer doesn't work\r\n                // console.log(`buffer : ${buffer}`);\r\n                console.log(`file type ${typeof file}`);\r\n                const base64 = reader.result;\r\n                buffer.push(base64);\r\n                files.push(file);\r\n                // console.log(`buffer: ${buffer}`);\r\n\r\n            }\r\n            // reader.readAsArrayBuffer(file);\r\n            reader.readAsDataURL(file);\r\n\r\n        });\r\n\r\n        // setFiles(prev => [...prev, ...acceptedFiles]); //Able to retrieve previous state\r\n        console.log(\"file accepted\");\r\n    }, []);\r\n    const { getRootProps, getInputProps } = useDropzone({onDrop, multiple:true, accept: 'image/*'});\r\n\r\n    useEffect(() => {\r\n        register({name: 'images'});\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(`files ${files}`)\r\n        setValue(\"images\", files); \r\n        console.log(\"set value\");\r\n    }, [files])\r\n\r\n    const fileList = files.map(file => (\r\n    <li key={file.path}>\r\n        {file.path} - {file.size} bytes\r\n    </li>\r\n    ));\r\n\r\n\r\n\r\n    return (\r\n    <section className=\"container\">\r\n        <div {...getRootProps({ className: \"dropzone\" })}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop some files here, or click to select files</p>\r\n        </div>\r\n        <aside>\r\n        <ul>{fileList}</ul>\r\n        </aside>\r\n    </section>\r\n    );\r\n    }\r\n\r\nexport default Dropzone;",{"ruleId":"59","severity":1,"message":"60","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":26},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"59","severity":1,"message":"67","line":1,"column":8,"nodeType":"61","messageId":"62","endLine":1,"endColumn":12},{"ruleId":"59","severity":1,"message":"68","line":10,"column":8,"nodeType":"61","messageId":"62","endLine":10,"endColumn":14},{"ruleId":"59","severity":1,"message":"69","line":25,"column":10,"nodeType":"61","messageId":"62","endLine":25,"endColumn":17},{"ruleId":"59","severity":1,"message":"70","line":25,"column":19,"nodeType":"61","messageId":"62","endLine":25,"endColumn":29},{"ruleId":"59","severity":1,"message":"71","line":26,"column":22,"nodeType":"61","messageId":"62","endLine":26,"endColumn":35},{"ruleId":"59","severity":1,"message":"72","line":2,"column":16,"nodeType":"61","messageId":"62","endLine":2,"endColumn":25},{"ruleId":"59","severity":1,"message":"73","line":2,"column":28,"nodeType":"61","messageId":"62","endLine":2,"endColumn":36},{"ruleId":"59","severity":1,"message":"74","line":3,"column":31,"nodeType":"61","messageId":"62","endLine":3,"endColumn":45},{"ruleId":"59","severity":1,"message":"75","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":19,"column":27,"nodeType":"78","messageId":"79","endLine":19,"endColumn":29},{"ruleId":"59","severity":1,"message":"72","line":2,"column":20,"nodeType":"61","messageId":"62","endLine":2,"endColumn":29},{"ruleId":"59","severity":1,"message":"80","line":4,"column":8,"nodeType":"61","messageId":"62","endLine":4,"endColumn":14},{"ruleId":"59","severity":1,"message":"81","line":2,"column":8,"nodeType":"61","messageId":"62","endLine":2,"endColumn":16},{"ruleId":"59","severity":1,"message":"82","line":8,"column":12,"nodeType":"61","messageId":"62","endLine":8,"endColumn":20},{"ruleId":"59","severity":1,"message":"83","line":9,"column":19,"nodeType":"61","messageId":"62","endLine":9,"endColumn":27},{"ruleId":"59","severity":1,"message":"84","line":10,"column":20,"nodeType":"61","messageId":"62","endLine":10,"endColumn":29},{"ruleId":"85","severity":1,"message":"86","line":35,"column":8,"nodeType":"87","endLine":35,"endColumn":10,"suggestions":"88"},{"ruleId":"85","severity":1,"message":"89","line":40,"column":8,"nodeType":"87","endLine":40,"endColumn":10,"suggestions":"90"},{"ruleId":"85","severity":1,"message":"91","line":46,"column":8,"nodeType":"87","endLine":46,"endColumn":15,"suggestions":"92"},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","no-native-reassign",["93"],"no-negated-in-lhs",["94"],"'logo' is defined but never used.","'styled' is defined but never used.","'feature' is assigned a value but never used.","'setFeature' is assigned a value but never used.","'setPointQuery' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useFormContext' is defined but never used.","'ErrorBoundary' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Button' is defined but never used.","'ReactDOM' is defined but never used.","'onChange' is assigned a value but never used.","'setFiles' is assigned a value but never used.","'setBuffer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useCallback has missing dependencies: 'buffer' and 'files'. Either include them or remove the dependency array.","ArrayExpression",["95"],"React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.",["96"],"React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [buffer, files]",{"range":"104","text":"105"},"Update the dependencies array to be: [register]",{"range":"106","text":"107"},"Update the dependencies array to be: [files, setValue]",{"range":"108","text":"109"},[1332,1334],"[buffer, files]",[1509,1511],"[register]",[1657,1664],"[files, setValue]"]